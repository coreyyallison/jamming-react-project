{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/Tracklist/Tracklist.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","search","bind","handleTermChange","this","onSearch","term","event","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemoval","name","artist","album","renderAction","Tracklist","tracks","map","id","SearchResults","Playlist","handleNameChange","defaultValue","PlaylistTracks","onSave","onNameChange","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","searchTerm","fetch","headers","Authorization","then","responce","console","log","json","data","items","artists","uri","savePlaylist","userID","method","body","JSON","stringify","playlistID","uris","App","PlaylistName","updatePlaylistName","newTrack","find","splice","oldTrack","index","findIndex","newName","trackURIs","push","results","playlistName","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.033c3766.chunk.js","sourcesContent":["var accessToken;\r\nconst clientID = \"33ea434a0ed742dd8e12c78b67504c8c\";\r\nconst redirectURI = \"JammingProject.surge.sh\";\r\n\r\nconst Spotify = {\r\n\tgetAccessToken() {\r\n\t\tif (accessToken) {\r\n\t\t\treturn accessToken;\r\n\t\t}\r\n\r\n\t\tconst accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n\t\tconst expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n\t\tif(accessTokenMatch && expiresInMatch) {\r\n\t\t\taccessToken = accessTokenMatch[1];\r\n\t\t\tlet expiresIn = Number(expiresInMatch[1]);\r\n\r\n\t\t\twindow.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n\t\t\twindow.history.pushState('Access Token', null, '/');\r\n\t\t\treturn(accessToken);\r\n\t\t} else{\r\n\t\t\twindow.location = \t`https://accounts.spotify.com/authorize?client_id=${clientID}\r\n\t\t\t\t\t\t\t\t&response_type=token&scope=playlist-modify-public&redirect_uri=\r\n\t\t\t\t\t\t\t\t${redirectURI}`;\r\n\t\t}\r\n\t},\r\n\r\n\tsearch(searchTerm) {\r\n\t\treturn fetch(\"https://api.spotify.com/v1/search?type=track&q=\" + searchTerm,\r\n\t\t\t\t{\r\n\t\t\t\t\theaders: {Authorization: `Bearer ${accessToken}`}\r\n\t\t\t\t})\r\n\t\t\t\t.then(responce => {\r\n\t\t\t\t\tconsole.log(responce);\r\n\t\t\t\t\treturn responce.json()})\r\n\t\t\t\t.then(data => {\r\n\t\t\t\t\tif(!data.tracks) {\r\n\t\t\t\t\t\treturn []\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn data.tracks.items.map(track => ({\r\n\t\t\t\t\t\t\tid: track.id,\r\n\t\t\t\t\t\t\tname: track.name,\r\n\t\t\t\t\t\t\tartist: track.artists[0].name,\r\n\t\t\t\t\t\t\talbum: track.album.name,\r\n\t\t\t\t\t\t\turi: track.uri\r\n\t\t\t\t\t\t}))\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t},\r\n\r\n\tsavePlaylist(name, tracks) {\r\n\t\tif(name && tracks) {\r\n\t\t\tlet accessToken = Spotify.getAccessToken();\r\n\t\t\tlet headers = {Authorization: `Bearer ${accessToken}`};\r\n\t\t\tlet userID;\r\n\r\n\t\t\treturn fetch('https://api.spotify.com/v1/me', {headers: headers})\r\n\t\t\t\t\t.then(responce => responce.json())\r\n\t\t\t\t\t.then(data => {\r\n\t\t\t\t\t\tuserID = data.id;\r\n\t\t\t\t\t\treturn fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\r\n\t\t\t\t\t\t\t\theaders : headers,\r\n\t\t\t\t\t\t\t\tmethod : 'POST',\r\n\t\t\t\t\t\t\t\tbody : JSON.stringify({name : name})\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t.then(responce => responce.json())\r\n\t\t\t\t\t\t\t.then(data => {\r\n\t\t\t\t\t\t\t\tlet playlistID = data.id;\r\n\t\t\t\t\t\t\t\treturn fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks`, {\r\n\t\t\t\t\t\t\t\t\theaders : headers,\r\n\t\t\t\t\t\t\t\t\tmethod : 'POST',\r\n\t\t\t\t\t\t\t\t\tbody : JSON.stringify({ uris : tracks})\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t})\r\n\t\t} else {\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default Spotify;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nexport class SearchBar extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state ={};\r\n\t\tthis.search = this.search.bind(this);\r\n\t\tthis.handleTermChange = this.handleTermChange.bind(this);\r\n\t}\r\n\r\n\tsearch() {\r\n\t\tthis.props.onSearch(this.state.term);\r\n\t}\r\n\r\n\thandleTermChange(event) {\r\n\t\tthis.setState({term: event.target.value});\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<div className=\"SearchBar\">\r\n\t\t\t  <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange}/>\r\n\t\t\t  <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './Track.css';\r\n\r\nexport class Track extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.addTrack = this.addTrack.bind(this);\r\n\t\tthis.removeTrack = this.removeTrack.bind(this);\r\n\r\n\t}\r\n\r\n\trenderAction() {\r\n\t\tif(this.props.isRemoval) {\r\n\t\t\treturn(<button className='Track-action' onClick={this.removeTrack}>-</button>)\r\n\t\t} else {\r\n\t\t\treturn(<button className='Track-action' onClick={this.addTrack}>+</button>)\r\n\t\t}\r\n\t}\r\n\r\n\taddTrack() {\r\n\t\t{this.props.onAdd(this.props.track)}\r\n\t}\r\n\r\n\tremoveTrack() {\r\n\t\t{this.props.onRemoval(this.props.track)}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<div className=\"Track\">\r\n\t\t\t  <div className=\"Track-information\">\r\n\t\t\t    <h3>{this.props.track.name}</h3>\r\n\t\t\t    <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n\t\t\t  </div>\r\n\t\t\t  {this.renderAction()}\r\n\t\t\t</div>\r\n\t\t)\r\n\t};\r\n}\r\n\r\nexport default Track;","import React from 'react';\r\nimport './Tracklist.css';\r\n\r\nimport Track from '../Track/Track';\r\n\r\nexport class Tracklist extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"TrackList\">\r\n\t\t\t\t{this.props.tracks.map(track => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Track track={track} key={track.id} onAdd={this.props.onAdd} onRemoval={this.props.onRemoval} isRemoval={this.props.isRemoval}/>\r\n\t\t\t\t\t)}\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Tracklist;","import React from 'react';\r\nimport './SearchResults.css';\r\nimport Tracklist from '../Tracklist/Tracklist';\r\n\r\nexport class SearchResults extends React.Component {\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<div className=\"SearchResults\">\r\n\t\t\t  <h2>Results</h2>\r\n\t\t\t  <Tracklist tracks={this.props.SearchResults} onAdd={this.props.onAdd} isRemoval={false}/>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default SearchResults;","import React from 'react';\r\nimport './Playlist.css';\r\nimport Tracklist from '../Tracklist/Tracklist';\r\n\r\nexport class Playlist extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.handleNameChange = this.handleNameChange.bind(this);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<div className=\"Playlist\">\r\n\t\t\t  <input defaultValue={\"New Playlist\"} onChange={this.handleNameChange}/>\r\n\t\t\t  <Tracklist tracks={this.props.PlaylistTracks} onRemoval={this.props.onRemoval} isRemoval={true}/>\r\n\t\t\t  <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n\t\t\t</div>\r\n\t\t\t)\r\n\t}\r\n\r\n\thandleNameChange(event) {\r\n\t\tthis.props.onNameChange(event.target.value);\r\n\t}\r\n}\r\n\r\nexport default Playlist;","import './App.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n        SearchResults : [],\n        PlaylistName : 'New Playlist',\n        PlaylistTracks : []\n        };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  } \n\n  addTrack(newTrack) {\n    if(this.state.PlaylistTracks.find(track => track.id === newTrack.id)) {\n      return;\n    } else {\n      this.setState(this.state.PlaylistTracks.splice(-1, 0, newTrack));\n    }\n  }\n\n  removeTrack(oldTrack) {\n    const index = this.state.PlaylistTracks.findIndex(track => track.id === oldTrack.id);\n    this.setState(this.state.PlaylistTracks.splice(index, 1));\n  }\n\n  updatePlaylistName(newName) {\n    this.setState({PlaylistName : newName});\n  }\n\n  savePlaylist() {\n    let trackURIs = [];\n    this.state.PlaylistTracks.map(track => {\n      trackURIs.push(track.uri)\n    });\n    console.log(trackURIs);\n\n    Spotify.savePlaylist(this.state.PlaylistName, trackURIs)\n    .then(() => this.setState( {\n      PlaylistName : 'New Playlist',\n      PlaylistTracks : []}));\n  }\n\n  search(searchTerm) {\n    Spotify.getAccessToken();\n    Spotify.search(searchTerm)\n    .then(results => {this.setState({SearchResults: results})});\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search}/>\n          <div className=\"App-playlist\">\n           <SearchResults SearchResults={this.state.SearchResults} onAdd={this.addTrack}/>\n           <Playlist  playlistName={this.state.PlaylistName} \n                      PlaylistTracks={this.state.PlaylistTracks}\n                      onRemoval={this.removeTrack}\n                      onNameChange={this.updatePlaylistName}\n                      onSave={this.savePlaylist}/>\n          </div>\n        </div>\n      </div>\n  )}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './Components/App/App.css'\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}